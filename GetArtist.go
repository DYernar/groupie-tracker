package main

import(
	"fmt"
	"net/http"
	"html/template"
	"io/ioutil"
	"encoding/json"
	"strconv"
)

func GetArtistByID(ID int) Artist {
	for _, artist := range fullData {
		if artist.ID == ID {
			return artist;
		}
	}
	var nullart Artist
	return nullart
}



func getArtist(w http.ResponseWriter, r * http.Request) {
	if r.URL.Path == "/artist" {
		if r.Method == "GET" {
			r.ParseForm()
			bandId := r.FormValue("ID")
			id, err := strconv.Atoi(bandId)
			if err != nil {
				w.Header().Set("Content-Type", "text/html")
				w.WriteHeader(400)
				fmt.Fprintf(w, "<h1>400 Bad Request!</h1>")
				return;
			}
			artist := GetArtistByID(id)

			for _, location := range artist.Locs.Locations {
				resp, err := http.Get("https://maps.googleapis.com/maps/api/geocode/json?address="+location+"&key=AIzaSyDA6Mwn73DcFZQkNIyC7ji2FiMjPzF2MjU")
				defer resp.Body.Close()


				if err == nil {	
					body, _ := ioutil.ReadAll(resp.Body)

					var unmarshResp AutoGenerated
					json.Unmarshal([]byte(body), &unmarshResp)
					for _, item := range unmarshResp.Results {
						var city City
						city.Lat = item.Geometry.Location.Lat
						city.Lng = item.Geometry.Location.Lng
						artist.Coords = append(artist.Coords, city)
					}
				}
				
			}

			t, err1 := template.ParseFiles("static/band.html")
			if err1 != nil {
				w.WriteHeader(500)
				fmt.Fprintf(w, "<h1>500 Internal server Error!</h1>")
				return;
			}
			t.Execute(w, artist)
		} else {
			w.Header().Set("Content-Type", "text/html")
			w.WriteHeader(400)
			fmt.Fprintf(w, "<h1>400 Bad Request!</h1>")
		}
	} else {
		w.Header().Set("Content-Type", "text/html")
		t, err := template.ParseFiles("static/error404.html")
		if err != nil {
			w.WriteHeader(500)
			fmt.Fprintf(w, "<h1>500 Internal server Error!</h1>")
			return;
		}
		w.WriteHeader(404)
		t.Execute(w, nil)
	}
}
